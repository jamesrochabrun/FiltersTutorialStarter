//
//  ViewController.swift
//  FiltersTutorialStarter
//
//  Created by James Rochabrun on 6/5/17.
//  Copyright Â© 2017 James Rochabrun. All rights reserved.
//

import UIKit
import AVFoundation


struct CameraStateTracker {
    var isFront: Bool
    var isFlashOn: Bool
}

//MARK: UI and properties
final class CameraVC: UIViewController {
    
    override var prefersStatusBarHidden: Bool { return true }
    
    //MARK: resize image constant
    var capturedImageNewWidth: CGFloat {
        return 450
    }
    var cameraStateTracker = CameraStateTracker(isFront: false, isFlashOn: false)

    //MARK: UI elements
    lazy var captureButton: UIButton = {
        let b = UIButton(type: .custom)
        b.translatesAutoresizingMaskIntoConstraints = false
        b.setImage(#imageLiteral(resourceName: "captionButton"), for: .normal)
        b.addTarget(self, action: #selector(takePhoto), for: .touchUpInside)
        return b
    }()
    
    lazy var cancelButton: UIButton = {
        let b = UIButton(type: .custom)
        b.translatesAutoresizingMaskIntoConstraints = false
        b.setImage(#imageLiteral(resourceName: "dismiss"), for: .normal)
        b.alpha = 0
        b.addTarget(self, action: #selector(cancelPhoto), for: .touchUpInside)
        return b
    }()
    
    ///Displays a preview of the video output generated by the device's cameras.
    let capturePreviewView: UIView = {
        let v = UIView()
        v.translatesAutoresizingMaskIntoConstraints = false
        return v
    }()
    
    lazy var toggleCameraButton: UIButton = {
        let b = UIButton(type: .custom)
        b.tintColor = .white
        b.translatesAutoresizingMaskIntoConstraints = false
        b.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
        b.layer.borderColor = UIColor.white.cgColor
        b.layer.borderWidth = 1.0
        b.addTarget(self, action: #selector(switchCameras), for: .touchUpInside)
        return b
    }()
    
    lazy var toggleFlashButton: UIButton = {
        let b = UIButton(type: .custom)
        b.tintColor = .white
        b.translatesAutoresizingMaskIntoConstraints = false
        b.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        b.layer.borderColor = UIColor.white.cgColor
        b.layer.borderWidth = 1.0
        b.addTarget(self, action: #selector(toggleFlash), for: .touchUpInside)
        return b
    }()
    
    lazy var filterView: FilterView = {
        let fv = FilterView()
        fv.isHidden = true
        fv.delegate = self
        return fv
    }()
    
    //MARK: CameraController
    fileprivate let cameraController = CameraController()
    
    //MARK: UI setUp
    func setUpViews() {
        
        view.addSubview(capturePreviewView)
        view.addSubview(filterView)
        view.addSubview(captureButton)
        view.addSubview(toggleFlashButton)
        view.addSubview(toggleCameraButton)
        view.addSubview(cancelButton)
        
        print("size", self.view.frame.size)
        NSLayoutConstraint.activate([
            
            capturePreviewView.topAnchor.constraint(equalTo: view.topAnchor),
            capturePreviewView.leftAnchor.constraint(equalTo: view.leftAnchor),
            capturePreviewView.heightAnchor.constraint(equalTo: view.heightAnchor),
            capturePreviewView.widthAnchor.constraint(equalTo: view.widthAnchor),
       
            filterView.heightAnchor.constraint(equalTo: view.heightAnchor),
            filterView.widthAnchor.constraint(equalTo: view.widthAnchor),
            filterView.leftAnchor.constraint(equalTo: view.leftAnchor),
            filterView.topAnchor.constraint(equalTo: view.topAnchor),
            
            toggleFlashButton.heightAnchor.constraint(equalToConstant: 60),
            toggleFlashButton.widthAnchor.constraint(equalToConstant: 60),
            toggleFlashButton.centerYAnchor.constraint(equalTo: captureButton.centerYAnchor),
            toggleFlashButton.rightAnchor.constraint(equalTo: captureButton.leftAnchor, constant: -30),
            
            captureButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -40),
            captureButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            captureButton.heightAnchor.constraint(equalToConstant: 80),
            captureButton.widthAnchor.constraint(equalToConstant: 80),
            
            cancelButton.heightAnchor.constraint(equalTo: toggleFlashButton.heightAnchor),
            cancelButton.widthAnchor.constraint(equalTo: toggleFlashButton.widthAnchor),
            cancelButton.leftAnchor.constraint(equalTo: view.leftAnchor, constant: 30),
            cancelButton.topAnchor.constraint(equalTo: view.topAnchor, constant: 30),
            
            toggleCameraButton.heightAnchor.constraint(equalTo: toggleFlashButton.heightAnchor),
            toggleCameraButton.widthAnchor.constraint(equalTo: toggleFlashButton.widthAnchor),
            toggleCameraButton.centerYAnchor.constraint(equalTo: captureButton.centerYAnchor),
            toggleCameraButton.leftAnchor.constraint(equalTo: captureButton.rightAnchor, constant: 30),

            ])
    }
}

//MARK: App lifecycle
extension CameraVC {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setUpViews()
        func configureCameraController() {
            
            cameraController.prepare {(error) in
                if let error = error { print(error) }
                try? self.cameraController.displayPreview(on: self.capturePreviewView)
            }
        }
        configureCameraController()        
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        toggleCameraButton.layer.cornerRadius = toggleCameraButton.frame.width / 2
        toggleFlashButton.layer.cornerRadius = toggleFlashButton.frame.width / 2

    }
}

//MARK: Photo action handlers Flash and rear/front camera
extension CameraVC {
    
    @objc fileprivate func toggleFlash() {
        
        if cameraStateTracker.isFlashOn {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
            cameraStateTracker.isFlashOn = false
           
        } else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
            cameraStateTracker.isFlashOn = true
        }
    }
    
    private func updateFlashStateForFrontDevice() {
        
        if cameraStateTracker.isFlashOn && cameraStateTracker.isFront {
            cameraStateTracker.isFlashOn = false
            cameraController.flashMode = .off
            
        } else {
            cameraStateTracker.isFlashOn = true
        }
    }
    
    @objc fileprivate func switchCameras() {
        
        do {
            try cameraController.switchCameras()
        } catch {
            print("Error: \(error)")
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            cameraStateTracker.isFront = true
            toggleFlashButton.isEnabled = false
            updateFlashStateForFrontDevice()
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            cameraStateTracker.isFront = false
            toggleFlashButton.isEnabled = true
            toggleFlash()

        case .none:
            return
        }
    }
}

//MARK: cpature photo handlers
extension CameraVC {
    
    @objc fileprivate func takePhoto() {
    
        cameraController.captureImage { (cgImage, error) in
            
            guard let cgImage = cgImage else {
                print(error ?? "Image capture error")
                return
            }
            
            let orientation: UIImageOrientation = self.cameraStateTracker.isFront ? .leftMirrored : .right
            let image = UIImage(cgImage: cgImage, scale: 0.1, orientation: orientation)
            let oldSize = image.size
            let newSize = CGSize(width: self.capturedImageNewWidth, height: self.capturedImageNewWidth * oldSize.height / oldSize.width)
            let scaledImage = UIImage.getImageScaledTo(newSize: newSize, from: image)
            self.handleCapturedImage(scaledImage)
        }
    }
    
    @objc fileprivate func cancelPhoto() {
    
        self.filterView.inputImage = nil
        self.filterView.isHidden = true

        UIView.animate(withDuration: 0.5) {
            self.cancelButton.alpha = 0
            self.toggleFlashButton.alpha = 1.0
            self.toggleCameraButton.alpha = 1.0
            self.captureButton.alpha = 1.0
        }
    }
    
    fileprivate func handleCapturedImage(_ image: UIImage) {
        
        self.filterView.inputImage = image
        self.filterView.isHidden = false

        UIView.animate(withDuration: 0.5) {
            self.cancelButton.alpha = 1.0
            self.toggleFlashButton.alpha = 0
            self.toggleCameraButton.alpha = 0
            self.captureButton.alpha = 0
        }
    }
}

//MARK: FilterviewDelegate method trigered after image saved
extension CameraVC: FilterViewDelegate {
    
    func performUpdateAfterImageSaved() {
        
        let alertController = UIAlertController(title: "Saved!", message: "Image Succesfully saved in your Camera roll", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "Ok", style: .cancel) { (action) in
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2, execute: {
                self.cancelPhoto()
            })
        }
        alertController.addAction(okAction)
        self.present(alertController, animated: true)
    }
}





























